"""
Django settings for rock project.

Generated by 'django-admin startproject' using Django 2.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/2.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.1/ref/settings/
"""

import os
import sys
import datetime

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
sys.path.insert(0, os.path.join(BASE_DIR, "apps"))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'z74oq#l-i$+mg(a9-s(7ygx!gg7jl9aztw4f4+z#9(6an7q&(m'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["*"]

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # 第三方插件
    "rest_framework",
    "corsheaders",  # 跨域
    "django_filters",
    "rbac",
    "emyxin",
    # https配置
    'werkzeug_debugger_runserver',
    'django_extensions',
]
BASE_API = "https://www.agavetest.info:8888"

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",  # 跨域
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    # 'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# CORS跨域设置
CORS_ORIGIN_ALLOW_ALL = True

ROOT_URLCONF = 'rock.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')]
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'rock.wsgi.application'

# Database
# https://docs.djangoproject.com/en/2.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}

# Password validation
# https://docs.djangoproject.com/en/2.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework_jwt.authentication.JSONWebTokenAuthentication",
        "rest_framework.authentication.BasicAuthentication",  #
        "rest_framework.authentication.SessionAuthentication",  #
    ),
    "DEFAULT_FILTER_BACKENDS": ["django_filters.rest_framework.DjangoFilterBackend"],
    # 自定义异常处理
    "EXCEPTION_HANDLER": "apps.common.custom.xops_exception_handler",
}
JWT_EXPIRATION_DELTA = os.environ.get("JWT_EXPIRATION_DELTA", 3)
# jwt setting
JWT_AUTH = {
    "JWT_EXPIRATION_DELTA": datetime.timedelta(days=int(JWT_EXPIRATION_DELTA)),
    "JWT_AUTH_HEADER_PREFIX": "Bearer",
}

# 配置ASGI
ASGI_APPLICATION = "rock.setting.application"

# Internationalization
# https://docs.djangoproject.com/en/2.1/topics/i18n/

LANGUAGE_CODE = 'zh-hans'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = True

AUTH_USER_MODEL = "rbac.UserProfile"

# 日志
BASE_LOG_DIR = os.path.join(BASE_DIR, "logs")

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "standard": {
            "format": "[%(asctime)s][%(levelname)s]"
                      "[%(filename)s:%(lineno)d][%(message)s]"
        },
        "simple": {"format": "[%(levelname)s][%(asctime)s]%(message)s"},
    },
    "handlers": {
        "default": {
            "level": "INFO",
            "class": "logging.handlers.RotatingFileHandler",
            "filename": os.path.join(BASE_LOG_DIR, "info_ctt.log"),
            "maxBytes": 1024 * 1024 * 50,
            "backupCount": 3,
            "formatter": "simple",
            "encoding": "utf-8",
        },
        "error": {
            "level": "ERROR",
            "class": "logging.handlers.RotatingFileHandler",
            "filename": os.path.join(BASE_LOG_DIR, "err_ctt.log"),
            "backupCount": 5,
            "formatter": "standard",
            "encoding": "utf-8",
        },
    },
    "loggers": {
        "info": {"handlers": ["default"], "level": "INFO", "propagate": True},
        "warn": {"handlers": ["default"], "level": "WARNING", "propagate": True},
        "error": {"handlers": ["error"], "level": "ERROR"},
        "celery": {"handlers": ["default"], "level": "DEBUG"},
    },
}

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.1/howto/static-files/

STATIC_URL = '/static/'
MEDIA_URL = "/be-media/"
MEDIA_ROOT = os.path.join(BASE_DIR, "be-media")
# 首选project静态文件搜寻路径
STATICFILES_DIRS = (os.path.join(BASE_DIR, "static"),)
